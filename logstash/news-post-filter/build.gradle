import java.nio.file.Files

import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply from: LOGSTASH_CORE_PATH + "/../rubyUtils.gradle"

// ===========================================================================
// plugin info
// ===========================================================================
group                      'org.logstashplugins' // must match the package of the main plugin class
version                    "${file("VERSION").text.trim()}" // read from required VERSION file
description                = "Example Java filter implementation"
pluginInfo.licenses        = ['Apache-2.0'] // list of SPDX license IDs
pluginInfo.longDescription = "This gem is a Logstash plugin required to be installed on top of the Logstash core pipeline using \$LS_HOME/bin/logstash-plugin install gemname. This gem is not a stand-alone program"
pluginInfo.authors         = ['Elasticsearch']
pluginInfo.email           = ['info@elastic.co']
pluginInfo.homepage        = "http://www.elastic.co/guide/en/logstash/current/index.html"
pluginInfo.pluginType      = "filter"
pluginInfo.pluginClass     = "NewsPostFilter"
pluginInfo.pluginName      = "news_post_filter" // must match the @LogstashPlugin annotation in the main plugin class
// ===========================================================================

sourceCompatibility = 11
targetCompatibility = 11

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    archiveClassifier = null
}

ext {
    mapstructVersion = "1.4.2.Final"
    lombokVersion = "1.18.20"
    lombokMapstructBindingVersion = "0.2.0"
}

dependencies {
//    compile project(':filter-common')
    implementation 'org.apache.commons:commons-lang3:3.7'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.3.6'
    implementation 'org.apache.logging.log4j:log4j-api:2.9.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.9.1'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.9'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.69'
    implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    //compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.0'
    //implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    //annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    implementation "org.projectlombok:lombok:${lombokVersion}", "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}", "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    implementation fileTree(dir: LOGSTASH_CORE_PATH, include: "build/libs/logstash-core-?.??.?.jar")
    // https://mvnrepository.com/artifact/junit/junit
    testImplementation group: 'junit', name: 'junit', version: '4.12'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.jruby:jruby-complete:9.2.7.0'
}

clean {
    delete "${projectDir}/Gemfile"
    delete "${projectDir}/" + pluginInfo.pluginFullName() + ".gemspec"
    delete "${projectDir}/lib/"
    delete "${projectDir}/vendor/"
    new FileNameFinder().getFileNames(projectDir.toString(), pluginInfo.pluginFullName() + "-?.?.?.gem").each { filename ->
        delete filename
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.register("vendor"){
    dependsOn shadowJar
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${pluginInfo.pluginFullName()}/${project.version}/${pluginInfo.pluginFullName()}-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
        validatePluginJar(projectJarFile, project.group)
    }
}

tasks.register("generateRubySupportFiles") {
    doLast {
        generateRubySupportFilesForPlugin(project.description, project.group, version)
    }
}

tasks.register("removeObsoleteJars") {
    doLast {
        new FileNameFinder().getFileNames(
                projectDir.toString(),
                "vendor/**/" + pluginInfo.pluginFullName() + "*.jar",
                "vendor/**/" + pluginInfo.pluginFullName() + "-" + version + ".jar").each { f ->
            delete f
        }
    }
}

tasks.register("gem"){
    dependsOn ([downloadAndInstallJRuby, removeObsoleteJars, vendor, generateRubySupportFiles])
    doLast {
        buildGem(projectDir, buildDir, pluginInfo.pluginFullName() + ".gemspec")
    }
}
