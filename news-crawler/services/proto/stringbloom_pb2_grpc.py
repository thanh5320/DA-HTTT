# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import services.proto.stringbloom_pb2 as stringbloom__pb2


class StringBloomServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Exists = channel.unary_unary(
            '/services.StringBloomService/Exists',
            request_serializer=stringbloom__pb2.CheckExistsRequest.SerializeToString,
            response_deserializer=stringbloom__pb2.CheckExistsResponse.FromString,
        )
        self.CheckExists = channel.unary_unary(
            '/services.StringBloomService/CheckExists',
            request_serializer=stringbloom__pb2.CheckExistsRequest.SerializeToString,
            response_deserializer=stringbloom__pb2.CheckExistsResponse.FromString,
        )
        self.CheckExistsAndSet = channel.unary_unary(
            '/services.StringBloomService/CheckExistsAndSet',
            request_serializer=stringbloom__pb2.CheckExistsRequest.SerializeToString,
            response_deserializer=stringbloom__pb2.CheckExistsResponse.FromString,
        )


class StringBloomServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Exists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckExists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckExistsAndSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StringBloomServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Exists': grpc.unary_unary_rpc_method_handler(
            servicer.Exists,
            request_deserializer=stringbloom__pb2.CheckExistsRequest.FromString,
            response_serializer=stringbloom__pb2.CheckExistsResponse.SerializeToString,
        ),
        'CheckExists': grpc.unary_unary_rpc_method_handler(
            servicer.CheckExists,
            request_deserializer=stringbloom__pb2.CheckExistsRequest.FromString,
            response_serializer=stringbloom__pb2.CheckExistsResponse.SerializeToString,
        ),
        'CheckExistsAndSet': grpc.unary_unary_rpc_method_handler(
            servicer.CheckExistsAndSet,
            request_deserializer=stringbloom__pb2.CheckExistsRequest.FromString,
            response_serializer=stringbloom__pb2.CheckExistsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'services.StringBloomService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class StringBloomService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Exists(request,
               target,
               options=(),
               channel_credentials=None,
               call_credentials=None,
               insecure=False,
               compression=None,
               wait_for_ready=None,
               timeout=None,
               metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.StringBloomService/Exists',
                                             stringbloom__pb2.CheckExistsRequest.SerializeToString,
                                             stringbloom__pb2.CheckExistsResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckExists(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    insecure=False,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.StringBloomService/CheckExists',
                                             stringbloom__pb2.CheckExistsRequest.SerializeToString,
                                             stringbloom__pb2.CheckExistsResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckExistsAndSet(request,
                          target,
                          options=(),
                          channel_credentials=None,
                          call_credentials=None,
                          insecure=False,
                          compression=None,
                          wait_for_ready=None,
                          timeout=None,
                          metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.StringBloomService/CheckExistsAndSet',
                                             stringbloom__pb2.CheckExistsRequest.SerializeToString,
                                             stringbloom__pb2.CheckExistsResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
