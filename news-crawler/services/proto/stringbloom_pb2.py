# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: stringbloom.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()

DESCRIPTOR = _descriptor.FileDescriptor(
    name='stringbloom.proto',
    package='services',
    syntax='proto3',
    serialized_options=b'Z\036bloom-filter/internal/services',
    create_key=_descriptor._internal_create_key,
    serialized_pb=b'\n\x11stringbloom.proto\x12\x08services\"7\n\x12\x43heckExistsRequest\x12\x0e\n\x06string\x18\x01 \x01(\t\x12\x11\n\ttimestamp\x18\x02 \x01(\x03\"%\n\x13\x43heckExistsResponse\x12\x0e\n\x06\x65xists\x18\x01 \x01(\x08\x32\xff\x01\n\x12StringBloomService\x12G\n\x06\x45xists\x12\x1c.services.CheckExistsRequest\x1a\x1d.services.CheckExistsResponse\"\x00\x12L\n\x0b\x43heckExists\x12\x1c.services.CheckExistsRequest\x1a\x1d.services.CheckExistsResponse\"\x00\x12R\n\x11\x43heckExistsAndSet\x12\x1c.services.CheckExistsRequest\x1a\x1d.services.CheckExistsResponse\"\x00\x42 Z\x1e\x62loom-filter/internal/servicesb\x06proto3'
)

_CHECKEXISTSREQUEST = _descriptor.Descriptor(
    name='CheckExistsRequest',
    full_name='services.CheckExistsRequest',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    create_key=_descriptor._internal_create_key,
    fields=[
        _descriptor.FieldDescriptor(
            name='string', full_name='services.CheckExistsRequest.string', index=0,
            number=1, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=b"".decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key),
        _descriptor.FieldDescriptor(
            name='timestamp', full_name='services.CheckExistsRequest.timestamp', index=1,
            number=2, type=3, cpp_type=2, label=1,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    serialized_options=None,
    is_extendable=False,
    syntax='proto3',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=31,
    serialized_end=86,
)

_CHECKEXISTSRESPONSE = _descriptor.Descriptor(
    name='CheckExistsResponse',
    full_name='services.CheckExistsResponse',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    create_key=_descriptor._internal_create_key,
    fields=[
        _descriptor.FieldDescriptor(
            name='exists', full_name='services.CheckExistsResponse.exists', index=0,
            number=1, type=8, cpp_type=7, label=1,
            has_default_value=False, default_value=False,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    serialized_options=None,
    is_extendable=False,
    syntax='proto3',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=88,
    serialized_end=125,
)

DESCRIPTOR.message_types_by_name['CheckExistsRequest'] = _CHECKEXISTSREQUEST
DESCRIPTOR.message_types_by_name['CheckExistsResponse'] = _CHECKEXISTSRESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

CheckExistsRequest = _reflection.GeneratedProtocolMessageType('CheckExistsRequest', (_message.Message,), {
    'DESCRIPTOR': _CHECKEXISTSREQUEST,
    '__module__': 'stringbloom_pb2'
    # @@protoc_insertion_point(class_scope:services.CheckExistsRequest)
})
_sym_db.RegisterMessage(CheckExistsRequest)

CheckExistsResponse = _reflection.GeneratedProtocolMessageType('CheckExistsResponse', (_message.Message,), {
    'DESCRIPTOR': _CHECKEXISTSRESPONSE,
    '__module__': 'stringbloom_pb2'
    # @@protoc_insertion_point(class_scope:services.CheckExistsResponse)
})
_sym_db.RegisterMessage(CheckExistsResponse)

DESCRIPTOR._options = None

_STRINGBLOOMSERVICE = _descriptor.ServiceDescriptor(
    name='StringBloomService',
    full_name='services.StringBloomService',
    file=DESCRIPTOR,
    index=0,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
    serialized_start=128,
    serialized_end=383,
    methods=[
        _descriptor.MethodDescriptor(
            name='Exists',
            full_name='services.StringBloomService.Exists',
            index=0,
            containing_service=None,
            input_type=_CHECKEXISTSREQUEST,
            output_type=_CHECKEXISTSRESPONSE,
            serialized_options=None,
            create_key=_descriptor._internal_create_key,
        ),
        _descriptor.MethodDescriptor(
            name='CheckExists',
            full_name='services.StringBloomService.CheckExists',
            index=1,
            containing_service=None,
            input_type=_CHECKEXISTSREQUEST,
            output_type=_CHECKEXISTSRESPONSE,
            serialized_options=None,
            create_key=_descriptor._internal_create_key,
        ),
        _descriptor.MethodDescriptor(
            name='CheckExistsAndSet',
            full_name='services.StringBloomService.CheckExistsAndSet',
            index=2,
            containing_service=None,
            input_type=_CHECKEXISTSREQUEST,
            output_type=_CHECKEXISTSRESPONSE,
            serialized_options=None,
            create_key=_descriptor._internal_create_key,
        ),
    ])
_sym_db.RegisterServiceDescriptor(_STRINGBLOOMSERVICE)

DESCRIPTOR.services_by_name['StringBloomService'] = _STRINGBLOOMSERVICE

# @@protoc_insertion_point(module_scope)
